body  {
  background: #ffffff; 
}

h1 {
  text-align: center;
  font-weight: 2;
}

p {
  text-align: center;
  color: black;
 }

p2 {
  text-align: center;
  color: white;
 }

.button {
  background-color: darkred;
  padding: 1em 1em;
  color: white;
  border: 0;
}

.button:hover {
  background: darkgrey;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0; 
  top: 0;
  height: 50%;
  width: 50%; 
  overflow: auto;
  background-color: black;
}

.closeBtn {
  color: lightgrey;
  float: right;
  font-size: 30px;
}

.closeBtn:hover, .closeBtn:focus{
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

.modal-content {
  background-color: grey;
  margin: 20% auto;
  padding: 20px;
  width: 70%;
}

.memory-game {
  display: grid;
  grid-template-columns: [row] 1fr [row] 1fr [row] 1fr;
  padding: 50px;
  grid-template-rows: 300px 300px 300px;
  perspective: 1000px; 

}


.memory-card{
  margin: 8px;
  /* /^ Margin, which lets you create space around elements is set her for space around each  card,
  We added calc to height and weight because this margin exceeds the size of the memory game box. So,
  we minus width and height from each card to make it fit again using calc. */
  /* position: relative; */
  transform: scale(1);
  transform-style: preserve-3d;
  transition: 0.5s;
}

.memory-card:active {
  transform: scale(.97);
  transition: transform 0.3s;
}
/* /^ This is a psuedoclass, which is a keyword addded t a selector that 
specifies a special state, ex hover. The transform property applies 2D or 
3D transformation to an element. This allows us to rotate, scale, move. 
Scale defines a transformation on either the X,Y, or Z axis. In 
order to transform this pseudoclass we needed to have a transform on the class itself,
which is memory-card.*/

.memory-card.flip{
  transform: rotateY(180deg);

}

.front-face,
.back-face { 
  width: 100%;
  height: 100%;
  /* padding: 2px; */
  position: absolute;
  /* border-radius: 5px; */
  /* background: lightblue; */
  /* border: 2px solid black; */
  backface-visibility: hidden;
}

.front-face{
  transform: rotateY(180deg);
}
/* /^ cards are positioned relative to the memory card which is within the memory-game 
Where he display:flex and wrap take place */
